//Для того, чтобы программа заработала: testClient, свойства, C/C++, общие, доп. каталоги включ. файлов поменять
#include <iostream>
#include <windows.h>
#include <string>
#include "../Basic Dependencies/Basic.h"
#include "../DllC++/testDll.h"

int main()
{
    helloWorld();
    /*Пример - есть программа, дающая оченку позиции в настольной игре. В одной dll хранится информация
    о том, как ходят короли, в другой - как ходят шашки, и т. д. Есть файл, в котором описано местоположения
    и названия dll относительно будущего .exe, и другой файл, в котором написано, как расставлены фигуры
    по доске. Затем информация о фигурах переносится и хранится в основной (клиентской) части программы, которая просчитывает варианты.
    Причем во время сборки программы неизвестно, какие фигуры учавствуют в игре.*/

    /*Если проводить аналогии с данной программой, то класс Basic - базовый класс для фигур,
    класс A - пример фигуры, а это - клиентская часть. Как мне сохранить информацию о фигурах
    в контейнер здесь?*/

    A* element = new A(1, 1.2);
    /*Вот так бы я создавал элемент класса, описанного в dll, если бы изначально знал,
    какие dll будут присутствовать. Но я хочу сделать полностью модульную программу так,
    чтобы информация обо всех dll хранилась в отдельном файле, а данные об элементах класса
    - еще в одном. И мне не понятно, как создавать элементы классов в клиентской части
    программы, когда я буду считывать их из файлов, потому как заранее не знаю типа переменной*/

    std::cout << element->print();
    delete element;
    return 0;
}